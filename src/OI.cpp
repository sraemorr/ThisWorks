// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "OI.h"

#include "SmartDashboard/SmartDashboard.h"
#include "Commands/MoveArm.h"
#include "Commands/MoveCollector.h"
#include "Commands/MoveElevator.h"
#include "Commands/MoveFinger.h"
#include "Commands/MoveWheelieBar.h"
#include "Commands/TankDrive.h"

OI::OI() {
    // Process operator interface input here.
    rightJoystick.reset(new Joystick(2));
    
    collectorForward.reset(new JoystickButton(rightJoystick.get(), 1));
    collectorForward->WhileHeld(new MoveCollector());
    leftJoystick.reset(new Joystick(1));
    
    collectorReverse.reset(new JoystickButton(leftJoystick.get(), 1));
    collectorReverse->WhileHeld(new MoveCollector());
    operatorJoystick.reset(new Joystick(0));
    
    elevatorButton.reset(new JoystickButton(operatorJoystick.get(), 3));
    elevatorButton->WhenPressed(new MoveElevator());
    wheelieBarButton.reset(new JoystickButton(operatorJoystick.get(), 2));
    wheelieBarButton->WhenPressed(new MoveWheelieBar(false, false));
    //fingerButton.reset(new JoystickButton(operatorJoystick.get(), 1));
    //fingerButton->WhenPressed(new MoveFinger());

    // SmartDashboard Buttons
    SmartDashboard::PutData("TankDrive", new TankDrive());
    SmartDashboard::PutData("MoveCollector", new MoveCollector());
    SmartDashboard::PutData("MoveArm", new MoveArm());
    SmartDashboard::PutData("MoveElevator: MoveElevator", new MoveElevator());
    //SmartDashboard::PutData("MoveFinger: MoveFinger", new MoveFinger());
    SmartDashboard::PutData("MoveWheelieBar: MoveWheelieBar", new MoveWheelieBar(false, false));
}

std::shared_ptr<Joystick> OI::getOperatorJoystick() {
   return operatorJoystick;
}

std::shared_ptr<Joystick> OI::getLeftJoystick() {
   return leftJoystick;
}

std::shared_ptr<Joystick> OI::getRightJoystick() {
   return rightJoystick;
}
